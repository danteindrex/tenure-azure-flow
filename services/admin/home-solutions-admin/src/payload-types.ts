/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    admin: AdminAuthOperations;
  };
  blocks: {};
  collections: {
    admin: Admin;
    users: User;
    user_profiles: UserProfile;
    user_contacts: UserContact;
    user_addresses: UserAddress;
    user_memberships: UserMembership;
    user_payments: UserPayment;
    user_payment_methods: UserPaymentMethod;
    user_subscriptions: UserSubscription;
    disputes: Dispute;
    queue: Queue;
    membership_queue: MembershipQueue;
    payout_management: PayoutManagement;
    kyc_verification: KycVerification;
    auditlog: Auditlog;
    user_audit_logs: UserAuditLog;
    user_agreements: UserAgreement;
    user_billing_schedules: UserBillingSchedule;
    admin_alerts: AdminAlert;
    newsfeedpost: Newsfeedpost;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    admin: AdminSelect<false> | AdminSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    user_profiles: UserProfilesSelect<false> | UserProfilesSelect<true>;
    user_contacts: UserContactsSelect<false> | UserContactsSelect<true>;
    user_addresses: UserAddressesSelect<false> | UserAddressesSelect<true>;
    user_memberships: UserMembershipsSelect<false> | UserMembershipsSelect<true>;
    user_payments: UserPaymentsSelect<false> | UserPaymentsSelect<true>;
    user_payment_methods: UserPaymentMethodsSelect<false> | UserPaymentMethodsSelect<true>;
    user_subscriptions: UserSubscriptionsSelect<false> | UserSubscriptionsSelect<true>;
    disputes: DisputesSelect<false> | DisputesSelect<true>;
    queue: QueueSelect<false> | QueueSelect<true>;
    membership_queue: MembershipQueueSelect<false> | MembershipQueueSelect<true>;
    payout_management: PayoutManagementSelect<false> | PayoutManagementSelect<true>;
    kyc_verification: KycVerificationSelect<false> | KycVerificationSelect<true>;
    auditlog: AuditlogSelect<false> | AuditlogSelect<true>;
    user_audit_logs: UserAuditLogsSelect<false> | UserAuditLogsSelect<true>;
    user_agreements: UserAgreementsSelect<false> | UserAgreementsSelect<true>;
    user_billing_schedules: UserBillingSchedulesSelect<false> | UserBillingSchedulesSelect<true>;
    admin_alerts: AdminAlertsSelect<false> | AdminAlertsSelect<true>;
    newsfeedpost: NewsfeedpostSelect<false> | NewsfeedpostSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: Admin & {
    collection: 'admin';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface AdminAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admin".
 */
export interface Admin {
  id: number;
  role: 'Super Admin' | 'Manager' | 'Support';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * User accounts and authentication - Click on a user to view detailed information
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  /**
   * Supabase auth user ID
   */
  auth_user_id?: string | null;
  email: string;
  email_verified?: boolean | null;
  status: 'Active' | 'Inactive' | 'Suspended' | 'Pending';
  updatedAt: string;
  createdAt: string;
}
/**
 * Personal profile information for users
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_profiles".
 */
export interface UserProfile {
  id: string;
  /**
   * Reference to users table
   */
  user_id: string;
  first_name?: string | null;
  last_name?: string | null;
  middle_name?: string | null;
  /**
   * Required for identity verification and compliance
   */
  date_of_birth?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Contact information for users (phone, email, etc.)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_contacts".
 */
export interface UserContact {
  id: string;
  /**
   * Reference to users table
   */
  user_id: string;
  contact_type: 'phone' | 'email' | 'emergency';
  /**
   * Phone number, email address, etc.
   */
  contact_value: string;
  is_primary?: boolean | null;
  is_verified?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Address information for users
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_addresses".
 */
export interface UserAddress {
  id: string;
  /**
   * Reference to users table
   */
  user_id: string;
  address_type?: ('primary' | 'billing' | 'shipping') | null;
  street_address?: string | null;
  /**
   * Apartment, suite, unit, etc. (optional)
   */
  address_line_2?: string | null;
  city?: string | null;
  state?: string | null;
  postal_code?: string | null;
  /**
   * ISO 2-letter country code
   */
  country_code?: string | null;
  is_primary?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Membership-specific business data
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_memberships".
 */
export interface UserMembership {
  id: string;
  /**
   * Reference to users table
   */
  user_id: string;
  join_date: string;
  /**
   * Current tenure duration in months
   */
  tenure?: number | null;
  verification_status?: ('PENDING' | 'VERIFIED' | 'FAILED' | 'SKIPPED') | null;
  /**
   * Administrator managing this member
   */
  assigned_admin_id?: (number | null) | Admin;
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Tracks all payment transactions and their status
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_payments".
 */
export interface UserPayment {
  id: string;
  /**
   * Reference to users table
   */
  user_id: string;
  /**
   * Reference to user_subscriptions table (optional)
   */
  subscription_id?: string | null;
  /**
   * Reference to user_payment_methods table (optional)
   */
  payment_method_id?: string | null;
  provider?: ('stripe' | 'paypal' | 'bank') | null;
  provider_payment_id?: string | null;
  provider_invoice_id?: string | null;
  provider_charge_id?: string | null;
  /**
   * Payment amount (decimal with 2 places)
   */
  amount: number;
  /**
   * 3-letter currency code (e.g., USD, EUR)
   */
  currency?: string | null;
  payment_type: 'initial' | 'recurring' | 'one_time';
  payment_date: string;
  status: 'succeeded' | 'pending' | 'failed' | 'refunded' | 'canceled';
  is_first_payment?: boolean | null;
  /**
   * Reason for payment failure (if applicable)
   */
  failure_reason?: string | null;
  /**
   * URL to payment receipt
   */
  receipt_url?: string | null;
  /**
   * Additional payment metadata (JSON format)
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Stores user payment method preferences and tokens
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_payment_methods".
 */
export interface UserPaymentMethod {
  id: string;
  /**
   * Reference to users table
   */
  user_id: string;
  provider?: ('stripe' | 'paypal' | 'bank') | null;
  method_type: 'card' | 'bank_account' | 'digital_wallet';
  method_subtype?: ('apple_pay' | 'google_pay' | 'cash_app') | null;
  /**
   * Provider payment method identifier
   */
  provider_payment_method_id?: string | null;
  last_four?: string | null;
  /**
   * Card brand (visa, mastercard, etc.)
   */
  brand?: string | null;
  expires_month?: number | null;
  expires_year?: number | null;
  is_default?: boolean | null;
  is_active?: boolean | null;
  /**
   * Additional payment method metadata (JSON format)
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Stores Stripe subscription information for members
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_subscriptions".
 */
export interface UserSubscription {
  id: string;
  /**
   * Reference to users table
   */
  user_id: string;
  provider?: ('stripe' | 'paypal') | null;
  /**
   * Unique provider subscription identifier
   */
  provider_subscription_id: string;
  /**
   * Provider customer identifier
   */
  provider_customer_id: string;
  status: 'active' | 'past_due' | 'canceled' | 'incomplete' | 'trialing' | 'unpaid';
  current_period_start: string;
  current_period_end: string;
  cancel_at_period_end?: boolean | null;
  canceled_at?: string | null;
  trial_end?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "disputes".
 */
export interface Dispute {
  id: string;
  /**
   * Unique dispute identifier
   */
  dispute_id: string;
  /**
   * Reference to user_payments
   */
  payment_id: string;
  user_id: string;
  type: 'chargeback' | 'dispute' | 'refund_request' | 'fraud_claim';
  status:
    | 'needs_response'
    | 'under_review'
    | 'evidence_submitted'
    | 'won'
    | 'lost'
    | 'accepted'
    | 'expired'
    | 'withdrawn';
  reason:
    | 'fraudulent'
    | 'unrecognized'
    | 'duplicate'
    | 'product_not_received'
    | 'product_unacceptable'
    | 'subscription_canceled'
    | 'general';
  /**
   * Disputed amount in cents
   */
  amount: number;
  currency?: string | null;
  /**
   * Stripe dispute ID if from Stripe
   */
  stripe_dispute_id?: string | null;
  /**
   * Message from customer explaining dispute
   */
  customer_message?: string | null;
  /**
   * Deadline to respond to dispute
   */
  respond_by: string;
  evidence?: {
    submitted?: boolean | null;
    submitted_at?: string | null;
    /**
     * Evidence of communication with customer
     */
    customer_communication?: string | null;
    /**
     * URL to receipt or proof of purchase
     */
    receipt_url?: string | null;
    /**
     * Documentation of service provided
     */
    service_documentation?: string | null;
    /**
     * Applicable refund/cancellation policy
     */
    refund_policy?: string | null;
    /**
     * URL to signed agreement/terms
     */
    customer_signature?: string | null;
    additional_documents?:
      | {
          document_url?: string | null;
          document_description?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Admin ID assigned to handle this dispute
   */
  assigned_to?: string | null;
  internal_notes?:
    | {
        note: string;
        created_by: string;
        created_at: string;
        id?: string | null;
      }[]
    | null;
  resolution?: {
    resolved?: boolean | null;
    resolved_at?: string | null;
    outcome?: ('won' | 'lost' | 'partial_refund' | 'full_refund') | null;
    resolution_notes?: string | null;
    amount_refunded?: number | null;
  };
  impact?: {
    /**
     * Fee charged by payment processor
     */
    chargeback_fee?: number | null;
    /**
     * Total financial loss including fees
     */
    total_loss?: number | null;
  };
  created_at?: string | null;
  updated_at?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Member tenure queue management
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "queue".
 */
export interface Queue {
  id: number;
  memberid: number;
  /**
   * Current position in the tenure queue
   */
  queue_position: number;
  subscription_active?: boolean | null;
  joined_at?: string | null;
  is_eligible?: boolean | null;
  total_months_subscribed?: number | null;
  last_payment_date?: string | null;
  /**
   * Total amount paid over lifetime
   */
  lifetime_payment_total?: number | null;
  has_received_payout?: boolean | null;
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "membership_queue".
 */
export interface MembershipQueue {
  id: number;
  /**
   * User ID in the queue
   */
  user_id: string;
  /**
   * Position in the queue (1 = first)
   */
  queue_position: number;
  /**
   * When the user joined the queue
   */
  joined_queue_at: string;
  /**
   * Total months the user has been subscribed
   */
  total_months_subscribed: number;
  /**
   * Date of last payment
   */
  last_payment_date?: string | null;
  /**
   * Total amount paid by the user
   */
  lifetime_payment_total: number;
  /**
   * Whether the user has received a payout
   */
  has_received_payout: boolean;
  /**
   * Additional notes about the queue entry
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payout_management".
 */
export interface PayoutManagement {
  id: string;
  /**
   * Unique payout identifier (e.g., PO-2025-001)
   */
  payout_id: string;
  user_id: string;
  /**
   * Queue position when payout was initiated
   */
  queue_position: number;
  /**
   * Payout amount ($100,000 as per BR-3)
   */
  amount: number;
  currency?: string | null;
  status:
    | 'pending_approval'
    | 'approved'
    | 'scheduled'
    | 'processing'
    | 'completed'
    | 'failed'
    | 'canceled'
    | 'on_hold';
  eligibility_check?: {
    /**
     * Continuous tenure verified (BR-9)
     */
    tenure_verified?: boolean | null;
    tenure_start_date?: string | null;
    /**
     * Total months of continuous tenure
     */
    tenure_months?: number | null;
    /**
     * All payments verified (BR-2, BR-6)
     */
    payments_verified?: boolean | null;
    /**
     * Total amount paid by member
     */
    total_paid?: number | null;
    /**
     * Fund has sufficient balance (BR-3, BR-4)
     */
    fund_balance_sufficient?: boolean | null;
    /**
     * KYC verification completed
     */
    kyc_verified?: boolean | null;
    /**
     * W-9 or tax information on file
     */
    tax_info_complete?: boolean | null;
    /**
     * No payment default history (BR-6)
     */
    no_default_history?: boolean | null;
    /**
     * Queue position calculated correctly (BR-5, BR-10)
     */
    queue_position_verified?: boolean | null;
    /**
     * All eligibility checks passed
     */
    all_checks_passed?: boolean | null;
    /**
     * Admin who verified eligibility
     */
    verified_by?: string | null;
    verified_at?: string | null;
  };
  approval_workflow?:
    | {
        approver_id: string;
        approver_role: 'finance_manager' | 'operations_manager' | 'compliance_officer' | 'executive';
        action: 'approved' | 'rejected' | 'pending';
        notes?: string | null;
        timestamp: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Date when payout is scheduled to be processed
   */
  scheduled_date?: string | null;
  payment_method: 'ach' | 'wire' | 'check' | 'paypal' | 'stripe';
  bank_details?: {
    account_holder_name?: string | null;
    bank_name?: string | null;
    /**
     * Last 4 digits only for security
     */
    account_number_last4?: string | null;
    routing_number?: string | null;
    account_type?: ('checking' | 'savings') | null;
  };
  tax_withholding?: {
    requires_withholding?: boolean | null;
    /**
     * Withholding rate percentage
     */
    withholding_rate?: number | null;
    withholding_amount?: number | null;
    /**
     * Amount after tax withholding
     */
    net_payout_amount?: number | null;
    /**
     * Generate 1099 for payouts over $600
     */
    form_1099_required?: boolean | null;
  };
  processing?: {
    initiated_at?: string | null;
    /**
     * Admin who initiated processing
     */
    initiated_by?: string | null;
    processor?: ('stripe' | 'plaid' | 'manual') | null;
    /**
     * External transaction ID from processor
     */
    transaction_id?: string | null;
    completed_at?: string | null;
    failed_at?: string | null;
    failure_reason?: string | null;
    retry_count?: number | null;
  };
  /**
   * URL to payout receipt/confirmation
   */
  receipt_url?: string | null;
  internal_notes?:
    | {
        note: string;
        created_by: string;
        created_at: string;
        id?: string | null;
      }[]
    | null;
  audit_trail?:
    | {
        action?: string | null;
        actor_id?: string | null;
        timestamp?: string | null;
        details?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  created_at?: string | null;
  updated_at?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * KYC verification records
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "kyc_verification".
 */
export interface KycVerification {
  id: number;
  user_id: string;
  status: 'pending' | 'approved' | 'rejected' | 'under_review';
  document_type?: ('passport' | 'drivers_license' | 'national_id') | null;
  verified_at?: string | null;
  verified_by?: string | null;
  rejection_reason?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * System audit log tracking all administrative actions
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auditlog".
 */
export interface Auditlog {
  id: number;
  /**
   * Admin user who performed this action
   */
  admin_i_d_id: number | Admin;
  /**
   * Type of entity that was changed (e.g., Member, Payment, NewsFeedPost)
   */
  entity_changed: string;
  /**
   * ID of the entity that was changed
   */
  entity_id?: number | null;
  /**
   * Type of action performed
   */
  change_type: 'INSERT' | 'UPDATE' | 'DELETE' | 'LOGIN' | 'LOGOUT' | 'VIEW' | 'EXPORT';
  /**
   * When this action occurred
   */
  timestamp: string;
  /**
   * Detailed information about the change (JSON format)
   */
  change_details?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_audit_logs".
 */
export interface UserAuditLog {
  id: number;
  /**
   * User ID associated with this audit log entry
   */
  user_id?: string | null;
  /**
   * Type of action performed
   */
  action: 'login' | 'logout' | 'profile_update' | 'payment' | 'subscription' | 'queue_update' | 'system';
  /**
   * Whether the action was successful
   */
  success: boolean;
  /**
   * Error message if action failed
   */
  error_message?: string | null;
  /**
   * Additional metadata about the action
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * IP address of the user
   */
  ip_address?: string | null;
  /**
   * User agent string
   */
  user_agent?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Tracks user agreements to terms and conditions
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_agreements".
 */
export interface UserAgreement {
  id: string;
  /**
   * Reference to users table
   */
  user_id: string;
  agreement_type: 'TERMS_CONDITIONS' | 'PAYMENT_AUTHORIZATION';
  /**
   * Version of the agreement (e.g., 1.0, 2.1)
   */
  version_number: string;
  /**
   * When the user agreed to this version
   */
  agreed_at?: string | null;
  /**
   * URL to the agreement document
   */
  document_url?: string | null;
  is_active?: boolean | null;
  /**
   * IP address when agreement was made
   */
  ip_address?: string | null;
  /**
   * Browser user agent when agreement was made
   */
  user_agent?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manages billing cycles and payment schedules
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_billing_schedules".
 */
export interface UserBillingSchedule {
  id: string;
  /**
   * Reference to users table
   */
  user_id: string;
  /**
   * Reference to user_subscriptions table
   */
  subscription_id?: string | null;
  billing_cycle?: ('MONTHLY' | 'QUARTERLY' | 'YEARLY') | null;
  /**
   * Date of the next scheduled billing
   */
  next_billing_date?: string | null;
  /**
   * Billing amount (decimal with 2 places)
   */
  amount?: number | null;
  /**
   * 3-letter currency code (e.g., USD, EUR)
   */
  currency?: string | null;
  is_active?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admin_alerts".
 */
export interface AdminAlert {
  id: string;
  alert_id: string;
  title: string;
  message: string;
  severity: 'info' | 'warning' | 'error' | 'critical';
  category: 'system' | 'security' | 'payment' | 'queue' | 'compliance' | 'user' | 'financial' | 'integration';
  status: 'new' | 'acknowledged' | 'investigating' | 'resolved' | 'dismissed';
  related_entity?: {
    entity_type?: ('user' | 'payment' | 'payout' | 'queue_entry' | 'transaction' | 'system') | null;
    entity_id?: string | null;
  };
  trigger?: {
    trigger_type?: ('automated' | 'manual' | 'system_event' | 'threshold') | null;
    /**
     * ID of the alert rule that triggered this
     */
    rule_id?: string | null;
    /**
     * User/system that triggered the alert
     */
    triggered_by?: string | null;
  };
  /**
   * Admin ID assigned to handle this alert
   */
  assigned_to?: string | null;
  acknowledged_by?: string | null;
  acknowledged_at?: string | null;
  resolved_by?: string | null;
  resolved_at?: string | null;
  resolution_notes?: string | null;
  notifications_sent?:
    | {
        channel?: ('email' | 'sms' | 'slack' | 'push' | 'in_app') | null;
        recipient?: string | null;
        sent_at?: string | null;
        status?: ('sent' | 'failed' | 'pending') | null;
        id?: string | null;
      }[]
    | null;
  escalation?: {
    escalated?: boolean | null;
    escalated_at?: string | null;
    escalated_to?: string | null;
    escalation_reason?: string | null;
  };
  /**
   * Additional context data
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  created_at?: string | null;
  updated_at?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage news feed posts and announcements for members
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsfeedpost".
 */
export interface Newsfeedpost {
  id: number;
  title: string;
  /**
   * Rich text content for the news post
   */
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Admin user who created this post
   */
  admin_i_d_id: number | Admin;
  /**
   * Date and time to publish this post
   */
  publish_date: string;
  /**
   * Current status of the post
   */
  status: 'Draft' | 'Published' | 'Scheduled' | 'Archived';
  /**
   * Priority level for displaying the post
   */
  priority?: ('Low' | 'Normal' | 'High' | 'Urgent') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'admin';
        value: number | Admin;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'user_profiles';
        value: string | UserProfile;
      } | null)
    | ({
        relationTo: 'user_contacts';
        value: string | UserContact;
      } | null)
    | ({
        relationTo: 'user_addresses';
        value: string | UserAddress;
      } | null)
    | ({
        relationTo: 'user_memberships';
        value: string | UserMembership;
      } | null)
    | ({
        relationTo: 'user_payments';
        value: string | UserPayment;
      } | null)
    | ({
        relationTo: 'user_payment_methods';
        value: string | UserPaymentMethod;
      } | null)
    | ({
        relationTo: 'user_subscriptions';
        value: string | UserSubscription;
      } | null)
    | ({
        relationTo: 'disputes';
        value: string | Dispute;
      } | null)
    | ({
        relationTo: 'queue';
        value: number | Queue;
      } | null)
    | ({
        relationTo: 'membership_queue';
        value: number | MembershipQueue;
      } | null)
    | ({
        relationTo: 'payout_management';
        value: string | PayoutManagement;
      } | null)
    | ({
        relationTo: 'kyc_verification';
        value: number | KycVerification;
      } | null)
    | ({
        relationTo: 'auditlog';
        value: number | Auditlog;
      } | null)
    | ({
        relationTo: 'user_audit_logs';
        value: number | UserAuditLog;
      } | null)
    | ({
        relationTo: 'user_agreements';
        value: string | UserAgreement;
      } | null)
    | ({
        relationTo: 'user_billing_schedules';
        value: string | UserBillingSchedule;
      } | null)
    | ({
        relationTo: 'admin_alerts';
        value: string | AdminAlert;
      } | null)
    | ({
        relationTo: 'newsfeedpost';
        value: number | Newsfeedpost;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'admin';
    value: number | Admin;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'admin';
    value: number | Admin;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admin_select".
 */
export interface AdminSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  id?: T;
  auth_user_id?: T;
  email?: T;
  email_verified?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_profiles_select".
 */
export interface UserProfilesSelect<T extends boolean = true> {
  id?: T;
  user_id?: T;
  first_name?: T;
  last_name?: T;
  middle_name?: T;
  date_of_birth?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_contacts_select".
 */
export interface UserContactsSelect<T extends boolean = true> {
  id?: T;
  user_id?: T;
  contact_type?: T;
  contact_value?: T;
  is_primary?: T;
  is_verified?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_addresses_select".
 */
export interface UserAddressesSelect<T extends boolean = true> {
  id?: T;
  user_id?: T;
  address_type?: T;
  street_address?: T;
  address_line_2?: T;
  city?: T;
  state?: T;
  postal_code?: T;
  country_code?: T;
  is_primary?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_memberships_select".
 */
export interface UserMembershipsSelect<T extends boolean = true> {
  id?: T;
  user_id?: T;
  join_date?: T;
  tenure?: T;
  verification_status?: T;
  assigned_admin_id?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_payments_select".
 */
export interface UserPaymentsSelect<T extends boolean = true> {
  id?: T;
  user_id?: T;
  subscription_id?: T;
  payment_method_id?: T;
  provider?: T;
  provider_payment_id?: T;
  provider_invoice_id?: T;
  provider_charge_id?: T;
  amount?: T;
  currency?: T;
  payment_type?: T;
  payment_date?: T;
  status?: T;
  is_first_payment?: T;
  failure_reason?: T;
  receipt_url?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_payment_methods_select".
 */
export interface UserPaymentMethodsSelect<T extends boolean = true> {
  id?: T;
  user_id?: T;
  provider?: T;
  method_type?: T;
  method_subtype?: T;
  provider_payment_method_id?: T;
  last_four?: T;
  brand?: T;
  expires_month?: T;
  expires_year?: T;
  is_default?: T;
  is_active?: T;
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_subscriptions_select".
 */
export interface UserSubscriptionsSelect<T extends boolean = true> {
  id?: T;
  user_id?: T;
  provider?: T;
  provider_subscription_id?: T;
  provider_customer_id?: T;
  status?: T;
  current_period_start?: T;
  current_period_end?: T;
  cancel_at_period_end?: T;
  canceled_at?: T;
  trial_end?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "disputes_select".
 */
export interface DisputesSelect<T extends boolean = true> {
  id?: T;
  dispute_id?: T;
  payment_id?: T;
  user_id?: T;
  type?: T;
  status?: T;
  reason?: T;
  amount?: T;
  currency?: T;
  stripe_dispute_id?: T;
  customer_message?: T;
  respond_by?: T;
  evidence?:
    | T
    | {
        submitted?: T;
        submitted_at?: T;
        customer_communication?: T;
        receipt_url?: T;
        service_documentation?: T;
        refund_policy?: T;
        customer_signature?: T;
        additional_documents?:
          | T
          | {
              document_url?: T;
              document_description?: T;
              id?: T;
            };
      };
  assigned_to?: T;
  internal_notes?:
    | T
    | {
        note?: T;
        created_by?: T;
        created_at?: T;
        id?: T;
      };
  resolution?:
    | T
    | {
        resolved?: T;
        resolved_at?: T;
        outcome?: T;
        resolution_notes?: T;
        amount_refunded?: T;
      };
  impact?:
    | T
    | {
        chargeback_fee?: T;
        total_loss?: T;
      };
  created_at?: T;
  updated_at?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "queue_select".
 */
export interface QueueSelect<T extends boolean = true> {
  memberid?: T;
  queue_position?: T;
  subscription_active?: T;
  joined_at?: T;
  is_eligible?: T;
  total_months_subscribed?: T;
  last_payment_date?: T;
  lifetime_payment_total?: T;
  has_received_payout?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "membership_queue_select".
 */
export interface MembershipQueueSelect<T extends boolean = true> {
  user_id?: T;
  queue_position?: T;
  joined_queue_at?: T;
  total_months_subscribed?: T;
  last_payment_date?: T;
  lifetime_payment_total?: T;
  has_received_payout?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payout_management_select".
 */
export interface PayoutManagementSelect<T extends boolean = true> {
  id?: T;
  payout_id?: T;
  user_id?: T;
  queue_position?: T;
  amount?: T;
  currency?: T;
  status?: T;
  eligibility_check?:
    | T
    | {
        tenure_verified?: T;
        tenure_start_date?: T;
        tenure_months?: T;
        payments_verified?: T;
        total_paid?: T;
        fund_balance_sufficient?: T;
        kyc_verified?: T;
        tax_info_complete?: T;
        no_default_history?: T;
        queue_position_verified?: T;
        all_checks_passed?: T;
        verified_by?: T;
        verified_at?: T;
      };
  approval_workflow?:
    | T
    | {
        approver_id?: T;
        approver_role?: T;
        action?: T;
        notes?: T;
        timestamp?: T;
        id?: T;
      };
  scheduled_date?: T;
  payment_method?: T;
  bank_details?:
    | T
    | {
        account_holder_name?: T;
        bank_name?: T;
        account_number_last4?: T;
        routing_number?: T;
        account_type?: T;
      };
  tax_withholding?:
    | T
    | {
        requires_withholding?: T;
        withholding_rate?: T;
        withholding_amount?: T;
        net_payout_amount?: T;
        form_1099_required?: T;
      };
  processing?:
    | T
    | {
        initiated_at?: T;
        initiated_by?: T;
        processor?: T;
        transaction_id?: T;
        completed_at?: T;
        failed_at?: T;
        failure_reason?: T;
        retry_count?: T;
      };
  receipt_url?: T;
  internal_notes?:
    | T
    | {
        note?: T;
        created_by?: T;
        created_at?: T;
        id?: T;
      };
  audit_trail?:
    | T
    | {
        action?: T;
        actor_id?: T;
        timestamp?: T;
        details?: T;
        id?: T;
      };
  created_at?: T;
  updated_at?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "kyc_verification_select".
 */
export interface KycVerificationSelect<T extends boolean = true> {
  user_id?: T;
  status?: T;
  document_type?: T;
  verified_at?: T;
  verified_by?: T;
  rejection_reason?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auditlog_select".
 */
export interface AuditlogSelect<T extends boolean = true> {
  admin_i_d_id?: T;
  entity_changed?: T;
  entity_id?: T;
  change_type?: T;
  timestamp?: T;
  change_details?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_audit_logs_select".
 */
export interface UserAuditLogsSelect<T extends boolean = true> {
  user_id?: T;
  action?: T;
  success?: T;
  error_message?: T;
  metadata?: T;
  ip_address?: T;
  user_agent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_agreements_select".
 */
export interface UserAgreementsSelect<T extends boolean = true> {
  id?: T;
  user_id?: T;
  agreement_type?: T;
  version_number?: T;
  agreed_at?: T;
  document_url?: T;
  is_active?: T;
  ip_address?: T;
  user_agent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user_billing_schedules_select".
 */
export interface UserBillingSchedulesSelect<T extends boolean = true> {
  id?: T;
  user_id?: T;
  subscription_id?: T;
  billing_cycle?: T;
  next_billing_date?: T;
  amount?: T;
  currency?: T;
  is_active?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admin_alerts_select".
 */
export interface AdminAlertsSelect<T extends boolean = true> {
  id?: T;
  alert_id?: T;
  title?: T;
  message?: T;
  severity?: T;
  category?: T;
  status?: T;
  related_entity?:
    | T
    | {
        entity_type?: T;
        entity_id?: T;
      };
  trigger?:
    | T
    | {
        trigger_type?: T;
        rule_id?: T;
        triggered_by?: T;
      };
  assigned_to?: T;
  acknowledged_by?: T;
  acknowledged_at?: T;
  resolved_by?: T;
  resolved_at?: T;
  resolution_notes?: T;
  notifications_sent?:
    | T
    | {
        channel?: T;
        recipient?: T;
        sent_at?: T;
        status?: T;
        id?: T;
      };
  escalation?:
    | T
    | {
        escalated?: T;
        escalated_at?: T;
        escalated_to?: T;
        escalation_reason?: T;
      };
  metadata?: T;
  created_at?: T;
  updated_at?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsfeedpost_select".
 */
export interface NewsfeedpostSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  admin_i_d_id?: T;
  publish_date?: T;
  status?: T;
  priority?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}